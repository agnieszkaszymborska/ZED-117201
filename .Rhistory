swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('MOja pierwsza funkcja')
boring_function('MOja pierwsza funkcja!')
boring_function('Moja pierwsza funkcja!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
reminder(5)
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("R", "jest", "gites!")
submit()
telegram("dupa", "jest", "blada")
submit()
submit()
mad_libs(place="dupa", adjective="dupa", noun = "dupa")
submit()
submit()
'Ja' %p% 'uwielbiam' %p% 'CiÄ™!'
library(swirl.pl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(c_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, avg)
sapply(flag_colors, sqrt)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
able(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl.pl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plant)s
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean) = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
d1
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "listopad 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
devtools::install_github("rstudio/EDAWR")
library(swirl.pl)
swirl()
library(swirl.pl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cron
cran
select(cran, -time)
select(cran, -(X:size))
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, !is.na(r_version))
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- selec(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package = group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
a
submit()
submit()
submit()
submit()
submit()
submit()
load("~/Pulpit/ZED_project_session.RData")
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library("caret")
library(caret)
devtools::install_github("ropensci/plotly")
install.packages("plotly")
all_data <- read.csv(file="elektrownie.csv", header=TRUE, sep=",")
setwd("~/Pulpit/projekt_ZED")
all_data <- read.csv(file="elektrownie.csv", header=TRUE, sep=",")
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
library(dplyr)
all_data <- read.csv(file="elektrownie.csv", header=TRUE, sep=",")
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
idbrands_with_models <- unique(needed_data[c("brand", "model")])
idmodels <- unique(needed_data$model)
idbrands <- unique(needed_data$brand)
gps <- unique(needed_data[c("latitude", "longitude")])
empty_pressure_values <- needed_data %>% filter(pressure == 0)
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(idmodel in idmodels) {
empty_pressure <- empty_values %>% filter(model == idmodel)
pressure_column <- not_empty_values %>% filter(model == idmodel) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[[which(needed_data$measurementId == row$measurementId)]] <- average_value
}
}
empty_pressure_values <- needed_data %>% filter(pressure == 0)
is.na(needed_data$pressure)
sum(is.na(needed_data$pressure))
empty_pressure_values <- needed_data %>% filter(radiation == 0)
empty_pressure_hours <- needed_data %>% filter(only_hour > 6 & only_hour  < 18 & radiation == 0)
dupa <- needed_data %>% filter(only_hour > 100 & only_hour  < 200 & radiation == 0)
nrows(dupa)
nrow(dupa)
nrow(dupa) == 0
empty_values <- needed_data %>% filter(radiation == 0)
not_empty_values <- needed_data %>% filter(radiation > 0)
for(idmodel in idmodels) {
empty_radiation <- empty_values %>% filter(model == idmodel & only_hour > 6 & only_hour  < 18 & radiation == 0)
if(nrow(empty_radiation) > 0) {
for(i in 1:nrow(empty_radiation)) {
row <- empty_radiation[i, ]
cloudcover_low <- row$cloudcover - 0.1
cloudcover_up <- row$cloudcover + 0.1
radiation_column <- not_empty_values %>% filter(model == idmodel & radiation > 0 & only_hour == row$only_hour & only_month == row$only_month & cloudcover > cloudcover_low & cloudcover < cloudcover_up) %>% select(radiation)
if(nrow(radiation_column) == 0) {
radiation_column <- not_empty_values %>% filter(model == idmodel & radiation > 0 & only_hour > row$only_hour - 2 & only_hour < row$only_hour - 2 & only_month == row$only_month & cloudcover > cloudcover_low & cloudcover < cloudcover_up) %>% select(radiation)
}
if(nrow(radiation_column) > 0) {
average_value <- mean(radiation_column$radiation)
if(!is.na(average_value)) {
needed_data$radiation[which(needed_data$measurementId == row$measurementId)] <- average_value
}
}
}
}
}
empty_pressure_values <- needed_data %>% filter(radiation == 0)
empty_pressure_hours <- needed_data %>% filter(only_hour > 6 & only_hour  < 18 & radiation == 0)
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
empty_pressure_values <- needed_data %>% filter(radiation == 0)
empty_pressure_hours <- needed_data %>% filter(only_hour > 5 & only_hour  < 19 & radiation == 0)
empty_values <- needed_data %>% filter(radiation == 0 & only_hour > 5 & only_hour  < 19)
not_empty_values <- needed_data %>% filter(radiation > 0 & only_hour > 5 & only_hour  < 19)
for(idmodel in idmodels) {
empty_radiation <- empty_values %>% filter(model == idmodel)
if(nrow(empty_radiation) > 0) {
for(i in 1:nrow(empty_radiation)) {
row <- empty_radiation[i, ]
cloudcover_low <- row$cloudcover - 0.1
cloudcover_up <- row$cloudcover + 0.1
radiation_column <- not_empty_values %>% filter(model == idmodel & only_hour == row$only_hour & only_month == row$only_month & cloudcover > cloudcover_low & cloudcover < cloudcover_up) %>% select(radiation)
if(nrow(radiation_column) > 0) {
average_value <- mean(radiation_column$radiation)
if(!is.na(average_value)) {
needed_data$radiation[which(needed_data$measurementId == row$measurementId)] <- average_value
}
}
}
}
}
length(idmodels)
idmodels
idmodels <- unique(needed_data$model)
idmodels
idsito <- unique(needed_data$idsito)
idsito <- unique(needed_data$place)
idsito
idmodels <- unique(all_data$idmodel)
idmodels
idbrands_with_models <- unique(needed_data[c("brand", "model")])
idbrands_with_models
gps <- unique(needed_data[c("latitude", "longitude")])
gps
idsito
gps <- unique(needed_data[c("latitude", "longitude", "place")])
gps
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
idbrands_with_models <- unique(needed_data[c("brand", "model")])
idmodels <- unique(needed_data$model)
idbrands <- unique(needed_data$brand)
idplaces <- unique(needed_data$place)
gps <- unique(needed_data[c("latitude", "longitude")])
gps_with_places_id <- unique(needed_data[c("latitude", "longitude", "place")])
empty_pressure_values <- needed_data %>% filter(pressure == 0)
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(idplace in idplaces) {
empty_pressure <- empty_values %>% filter(place == idplace)
pressure_column <- not_empty_values %>% filter(place == idplace) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[[which(needed_data$measurementId == row$measurementId)]] <- average_value
}
}
empty_pressure_values <- needed_data %>% filter(pressure == 0)
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(idplace in idplaces) {
empty_pressure <- empty_values %>% filter(place == idplace)
pressure_column <- not_empty_values %>% filter(place == idplace) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[[which(needed_data$measurementId == row$measurementId)]] <- average_value
}
}
for(idplace in idplaces) {print(idplace)}
for(idplace in idplaces) {print(idplace[1])}
for(i in 1:length(idplaces)) {print(idplace[[i]])}
for(i in 1:length(idplaces)) {print(idplaces[[i]])}
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
empty_pressure_values <- needed_data %>% filter(pressure == 0)
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(i in 1:length(idplaces))
empty_pressure <- empty_values %>% filter(place == idplaces[[i]])
pressure_column <- not_empty_values %>% filter(place == idplaces[[i]]) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[[which(needed_data$measurementId == row$measurementId)]] <- average_value
}
}
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(i in 1:length(idplaces)) {
empty_pressure <- empty_values %>% filter(place == idplaces[[i]])
pressure_column <- not_empty_values %>% filter(place == idplaces[[i]]) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[[which(needed_data$measurementId == row$measurementId)]] <- average_value
}
}
needed_data <- all_data %>% select(-icon, -(tempi:irri_pvgis_mod))
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "dewpoint", "bearing", "cloudcover", "energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
needed_data$pressure[1]
empty_pressure_values <- needed_data %>% filter(pressure == 0)
empty_values <- needed_data %>% filter(pressure == 0)
not_empty_values <- needed_data %>% filter(pressure > 0)
for(idplace in idplaces) {
empty_pressure <- empty_values %>% filter(place == idplace)
pressure_column <- not_empty_values %>% filter(place == idplace) %>% select(pressure)
average_value <- mean(pressure_column$pressure)
if(is.na(average_value)) {
pressure_column <- not_empty_values %>% select(pressure)
average_value <- mean(pressure_column$pressure)
}
for(i in 1:nrow(empty_pressure)) {
row <- empty_pressure[i, ]
needed_data$pressure[which(needed_data$measurementId == row$measurementId)] <- average_value
}
}
empty_pressure_values <- needed_data %>% filter(pressure == 0)
sum(is.na(needed_data$pressure))
empty_pressure_values <- needed_data %>% filter(radiation == 0)
empty_pressure_hours <- needed_data %>% filter(only_hour > 5 & only_hour  < 19 & radiation == 0)
empty_values <- needed_data %>% filter(radiation == 0 & only_hour > 5 & only_hour  < 19)
not_empty_values <- needed_data %>% filter(radiation > 0 & only_hour > 5 & only_hour  < 19)
for(idplace in idplaces) {
empty_radiation <- empty_values %>% filter(place == idplace)
if(nrow(empty_radiation) > 0) {
for(i in 1:nrow(empty_radiation)) {
row <- empty_radiation[i, ]
cloudcover_low <- row$cloudcover - 0.1
cloudcover_up <- row$cloudcover + 0.1
radiation_column <- not_empty_values %>% filter(place == idplace& only_hour == row$only_hour & only_month == row$only_month & cloudcover > cloudcover_low & cloudcover < cloudcover_up) %>% select(radiation)
if(nrow(radiation_column) > 0) {
average_value <- mean(radiation_column$radiation)
if(!is.na(average_value)) {
needed_data$radiation[which(needed_data$measurementId == row$measurementId)] <- average_value
}
}
}
}
}
sum(is.na(needed_data$radiation))
empty_pressure_values <- needed_data %>% filter(radiation == 0)
empty_pressure_hours <- needed_data %>% filter(only_hour > 5 & only_hour  < 19 & radiation == 0)
needed_data$place_string <- paste("place: ", as.character(needed_data$place))
View(idbrands_with_models)
gunique(needed_data$place_string)
unique(needed_data$place_string)
install.packages("kableExtra")
col_names <- c("Åšrednia", "WartoÅ›Ä‡ minimalna", "WartoÅ›Ä‡ maksymalna", "Odchylenie standardowe", "Liczba zerowych wartoÅ›ci")
row_names <- colnames(needed_data)
row_names
summary <- data_frame()
summary
colnames(summary) <- col_names
summary <- data_frame(row_names, col_names)
summary <- data_frame()
summary[1,1] <- 0
summary
needed_data["pressure"]
needed_data %>% select("pressure")
column_values <- needed_data %>% select("pressure")
sum(column_values == 0)
column_values <- needed_data %>% select("radiation")
sum(column_values == 0)
install.packages("kableExtra")
devtools::install_github("haozhu233/kableExtra")
