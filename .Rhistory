num_vect >= 6
my_char <- c("Mam", "na", "imię")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Aga")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <-rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect1, vect2)
identical(vect1, vect2)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Domarad", "Lubomir", "Drogostan", "Uniegosta")
patients <- c("Domarad", "Lubomira", "Drogostan", "Uniegosta")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("pacjent", "wiek", "waga", "MCV", "MCH", "MCHC")
colnames(my_data) <- cnames
my_data
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
sqrt(z - 1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div = z / my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
mj <- 22
mj <- 2
mj <- 23
ls
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
lis.files()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
library(swirl.pl)
swirl()
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
isTrue(6>4)
isTRUE(6>4)
identical('foo', 'foo')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl.pl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('MOja pierwsza funkcja')
boring_function('MOja pierwsza funkcja!')
boring_function('Moja pierwsza funkcja!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
reminder(5)
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("R", "jest", "gites!")
submit()
telegram("dupa", "jest", "blada")
submit()
submit()
mad_libs(place="dupa", adjective="dupa", noun = "dupa")
submit()
submit()
'Ja' %p% 'uwielbiam' %p% 'Cię!'
library(swirl.pl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(c_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, avg)
sapply(flag_colors, sqrt)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
able(flags$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(swirl.pl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plant)s
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean) = 100, sd = 25)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
d1
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "listopad 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
devtools::install_github("rstudio/EDAWR")
library(swirl.pl)
swirl()
library(swirl.pl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cron
cran
select(cran, -time)
select(cran, -(X:size))
select(cran, -X:size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
filter(cran, !is.na(r_version))
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- selec(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package = group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
a
submit()
submit()
submit()
submit()
submit()
submit()
load("~/Pulpit/ZED_project_session.RData")
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library("caret")
library(caret)
library(dplyr)
library(ggplot2)
library('corrplot')
library(caret)
library(plotly)
library(tidyr)
all_data <- read.csv(file="elektrownie.csv", header=TRUE, sep=",")
setwd("~/Pulpit/projekt_ZED")
all_data <- read.csv(file="elektrownie.csv", header=TRUE, sep=",")
needed_data <- all_data
colnames(needed_data) <- c("measurementId", "place", "model", "brand", "latitude","longitude", "age", "year", "day", "hour", "date", "temperature", "radiation", "pressure", "windspeed", "humidity", "icon" , "dewpoint", "bearing", "cloudcover", "temp_param", "radiation_param", "pressure_param", "wind_param", "humidity_param", "dewpoint_param","bearing_param", "cloud_param", "distance", "altitude", "azimuth", "altitude_param", "azimuth_param","pcnm1", "pcnm2", "pcnm3", "pcnm4", "pcnm5", "pcnm6", "pcnm7", "pcnm8", "pcnm9", "pcnm10", "pcnm11", "pcnm12", "pcnm13", "pcnm14", "pcnm15", "mode", "mode_param","energy")
needed_data$only_day <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%d"))
needed_data$only_month <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%m"))
needed_data$only_hour <- as.numeric(format(as.POSIXct(factor(needed_data$date),format="%m/%d/%Y %H:%M"),"%H"))
needed_data$date_posix <- as.POSIXct(as.character(needed_data$date), format="%m/%d/%Y %H:%M")
needed_data$place_string <- paste("Wsp: ", as.character(needed_data$latitude), " ",as.character(needed_data$longitude), " Panel: ", as.character(needed_data$place))
idplaces <- unique(needed_data$place)
for(idplace in idplaces) {
average_value <- mean(needed_data$pressure[needed_data$pressure > 0 & needed_data$place == idplace])
if(!is.na(average_value)) {
needed_data$pressure[needed_data$pressure == 0 & needed_data$place == idplace] <- average_value
}
}
empty_values <- needed_data %>% filter(radiation == 0 & only_hour > 4 & only_hour  < 20 & energy > 0)
not_empty_values <- needed_data %>% filter(radiation > 0 & only_hour > 4 & only_hour  < 20)
for(idplace in idplaces) {
empty_radiation <- empty_values %>% filter(place == idplace)
if(nrow(empty_radiation) > 0) {
for(i in 1:nrow(empty_radiation)) {
row <- empty_radiation[i, ]
cloudcover_low <- row$cloudcover - 0.2
cloudcover_up <- row$cloudcover + 0.2
radiation_column <- not_empty_values %>% filter(place == idplace & only_hour == row$only_hour & only_month == row$only_month & cloudcover > cloudcover_low & cloudcover < cloudcover_up) %>% select(radiation)
if(nrow(radiation_column) > 0) {
average_value <- mean(radiation_column$radiation)
if(!is.na(average_value)) {
needed_data$radiation[which(needed_data$measurementId == row$measurementId)] <- average_value
}
}
}
}
}
set.seed(1)
training_data <- needed_data
inTraining <-
createDataPartition(
y = training_data$energy,
p = .6,
list = FALSE)
training <- training_data[ inTraining,]
testing  <- training_data[-inTraining,]
set.seed(1)
ctrl <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
fit <- train(energy ~ radiation + humidity + mode + radiation_param + altitude +  place,
data = training,
method = "nnet",
metric = "RMSE",
trControl = ctrl)
fit
pred <- predict(fit, newdata = testing)
dat <- data.frame(obs =  testing$energy,
pred = pred)
defaultSummary(dat)
set.seed(1)
training_data <- needed_data
inTraining <-
createDataPartition(
y = training_data$energy,
p = .75,
list = FALSE)
training <- training_data[ inTraining,]
testing  <- training_data[-inTraining,]
set.seed(1)
ctrl <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
fit <- train(energy ~ radiation + humidity + mode + radiation_param + altitude +  place,
data = training,
method = "nnet",
metric = "RMSE",
trControl = ctrl)
fit
pred <- predict(fit, newdata = testing)
dat <- data.frame(obs =  testing$energy,
pred = pred)
defaultSummary(dat)
set.seed(1)
training_data <- needed_data
inTraining <-
createDataPartition(
y = training_data$place,
p = .75,
list = FALSE)
training <- training_data[ inTraining,]
testing  <- training_data[-inTraining,]
set.seed(1)
ctrl <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
fit <- train(energy ~ radiation + humidity + mode + radiation_param + altitude +  place,
data = training,
method = "nnet",
metric = "RMSE",
trControl = ctrl)
fit
set.seed(1)
training_data <- needed_data
inTraining <-
createDataPartition(
y = training_data$place,
p = .75,
list = FALSE)
training <- training_data[ inTraining,]
testing  <- training_data[-inTraining,]
set.seed(1)
ctrl <- trainControl(
method = "repeatedcv",
number = 2,
repeats = 5)
fit <- train(energy ~ radiation + humidity + mode + radiation_param + altitude +  place,
data = training,
method = "nnet",
metric = "RMSE",
trControl = ctrl)pred <- predict(fit, newdata = testing)
dat <- data.frame(obs =  testing$energy,
pred = pred)
defaultSummary(dat)
pred <- predict(fit, newdata = testing)
dat <- data.frame(obs =  testing$energy,
pred = pred)
defaultSummary(dat)
